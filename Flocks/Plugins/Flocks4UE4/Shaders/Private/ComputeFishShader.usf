#include "/Engine/Private/Common.ush"

struct BoidData{
	int instanceId;
	int groupIdLocal;
	int groupIdGlobal;
	int staticMeshId;
	float accelerationSpeed;
	float maxVelocity;
	float3 velocity;
	float3 position;
	float3 acceleration;
};

struct VolumeData{
	int instanceId;
	float3 position;
	float innerRadius;
	float outerRadius;
	float falloff;
	int volumeType;
};

struct FlockData{
	int numBoids;
};

float getDistance(float3 v1, float3 v2) {
	return sqrt((v2[0]-v1[0])*(v2[0]-v1[0]) + (v2[1]-v1[1])*(v2[1]-v1[1]) + (v2[2]-v1[2])*(v2[2]-v1[2]));
}

float getInfluence(float3 _position, float3 _volumePos, float _innerRadius, float _outerRadius, float _falloff)
{
	float distanceFromEpicenter = getDistance(_position, _volumePos);

	float validatedInnerRadius = max(0.0f, _innerRadius);
	float validatedOuterRadius = max(_outerRadius, validatedInnerRadius);
	float validatedDist = max(0.f, distanceFromEpicenter);

	if (validatedDist >= validatedOuterRadius)
	{
		// outside the radius, no effect
		return 0.0f;
	}

	if ((_falloff == 0.f) || (validatedDist <= validatedInnerRadius))
	{
		// no falloff or inside inner radius means full effect
		return 1.0f;
	}

	// calculate the interpolated scale
	float influence = 1.f - ((validatedDist - validatedInnerRadius) / (validatedOuterRadius - validatedInnerRadius));
	influence = pow(influence, _falloff);

	return influence;
}

RWStructuredBuffer<BoidData> data;
RWStructuredBuffer<VolumeData> volumeData;
RWStructuredBuffer<FlockData> flockData;

[numthreads(1, 128, 1)]
void VS_test(uint3 ThreadId : SV_DispatchThreadID)
{		
	int numBoids = flockData[0].numBoids;
	int calculationsPerThread = FlocksConstant.CalculationsPerThread;
	
	for (int iteration = 0; iteration < calculationsPerThread; iteration++) {		
		int currentThreadId = calculationsPerThread * ThreadId.y + iteration;
		
		if (currentThreadId >= numBoids)
			return;
			
		int currentId = numBoids + currentThreadId;
		BoidData currentState = data[currentThreadId + numBoids];
		BoidData newState = data[currentThreadId];
	
		int currentGroup = currentState.groupIdGlobal;

		float cohesionRadius = FlocksGroups.CohesionRadius[currentGroup];
		float alignmentRadius = FlocksGroups.AlignmentRadius[currentGroup];
		float separationRadius = FlocksGroups.SeparationRadius[currentGroup];
		float cohesion = FlocksGroups.Cohesion[currentGroup];
		float alignment = FlocksGroups.Alignment[currentGroup];
		float separation = FlocksGroups.Separation[currentGroup];
		float restriction = FlocksGroups.Restriction[currentGroup];
		float flee = FlocksGroups.Flee[currentGroup];
		float goal = FlocksGroups.Goal[currentGroup];

		float3 steerCohesion = { 0.0f, 0.0f, 0.0f };
		float3 steerSeparation = { 0.0f, 0.0f, 0.0f };
		float3 steerAlignment = { 0.0f, 0.0f, 0.0f };
		float3 steerFlee = { 0.0f, 0.0f, 0.0f };
		float3 steerGoal = { 0.0f, 0.0f, 0.0f };

		float steerCohesionCnt = 0.0f;
		float steerSeparationCnt = 0.0f;
		float steerAlignmentCnt = 0.0f;
		float steerFleeCnt = 0.0f;
		float steerGoalCnt = 0.0f;
	
		for (int i = numBoids; i < 2 * numBoids; i++) 
		{
			if (i != currentId) {
				float d = getDistance(data[i].position, currentState.position);
				if (d < cohesionRadius) {
					steerCohesion += data[i].position;
					steerCohesionCnt++;
				}
				if (d < separationRadius) {
					steerSeparation += data[i].position - currentState.position;
					steerSeparationCnt++;
				}
				if (d < alignmentRadius) {
					steerAlignment += data[i].velocity;
					steerAlignmentCnt++;
				}
			}
		}

		float closestDist = 100000000;
		int closestRest = -1;

		for(int j = 0; j < FlocksVariable.NumVolumes; ++j)
		{
			switch(volumeData[j].volumeType)
			{
				case 0:
				{
					float d = getDistance(volumeData[j].position, currentState.position);
					if(d < closestDist)
					{
						closestDist = d;
						closestRest = j;
					}
				}
				break;

				case 1:
				{
					float inf = getInfluence(currentState.position, volumeData[j].position, volumeData[j].innerRadius, volumeData[j].outerRadius, volumeData[j].falloff);

					if(inf > 0.0f)
					{
						steerFlee -= (volumeData[j].position - currentState.position) * getInfluence(currentState.position, volumeData[j].position, volumeData[j].innerRadius, volumeData[j].outerRadius, volumeData[j].falloff);
						steerFleeCnt++;
					}
				}
				break;

				case 2:
				{
					float inf = 1.0f - getInfluence(currentState.position, volumeData[j].position, volumeData[j].innerRadius, volumeData[j].outerRadius, volumeData[j].falloff);

					if(inf > 0.0f)
					{
						steerGoal += (volumeData[j].position - currentState.position) * inf;
						steerGoalCnt++;
					}
				}
				break;
			}
		}

		float3 steerRestriction = float3(0, 0, 0);
		if(closestRest > -1 && closestDist > volumeData[closestRest].outerRadius)
		{
			steerRestriction = volumeData[closestRest].position - currentState.position;
			steerRestriction = normalize(steerRestriction);
		}

		if(steerFleeCnt != 0)
		{
			steerFlee /= steerFleeCnt;
			steerFlee = normalize(steerFlee);
		}

		if(steerGoalCnt != 0)
		{
			steerGoal /= steerGoalCnt;
			steerGoal = normalize(steerGoal);
		}

		if (steerCohesionCnt != 0) {
			steerCohesion = (steerCohesion / steerCohesionCnt - currentState.position);
			steerCohesion = normalize(steerCohesion);
		}

		if (steerSeparationCnt != 0) {
			steerSeparation = -1.f * (steerSeparation / steerSeparationCnt);
			steerSeparation = normalize(steerSeparation);
		}

		if (steerAlignmentCnt != 0) {
			steerAlignment /= steerAlignmentCnt;
			steerAlignment = normalize(steerAlignment);
		}
	
		newState.acceleration = (steerGoal * goal + steerFlee * flee + steerCohesion * cohesion + steerSeparation * separation + steerAlignment * alignment + steerRestriction * restriction) * currentState.accelerationSpeed;
	
		newState.velocity += newState.acceleration * FlocksVariable.DeltaSeconds;
		newState.velocity = clamp(newState.velocity, -currentState.maxVelocity, currentState.maxVelocity);

		newState.position += newState.velocity * FlocksVariable.DeltaSeconds;
	
		data[currentThreadId] = newState;
	}
}
